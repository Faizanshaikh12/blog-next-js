import React from "react";
import Head from "next/head";
import Tabs from "../../components/Tabs";
import {GetServerSideProps} from "next";
import {AxiosResponse} from "axios";
import {IArticle, ICategory, ICollectionResponse, IPagination, IQueryOptions} from "../../types";
import {getArticles, getCategories} from "../../http";
import qs from 'qs';
import ArticleList from "../../components/ArticleList";
import {formatSlug} from "../../utils";
import Pagination from "../../components/Pagination";
import {useRouter} from "next/router";
import {debounce} from "lodash";


interface IPropTypes {
    categories: {
        items: ICategory[];
    };
    articles: {
        items: IArticle[];
        pagination: IPagination;
    };
    slug: string;
}

const category = ({categories, articles, slug}: IPropTypes) => {
    const router = useRouter();
    const handleOnSearch = (query: string) => {
        router.push(`/category/${slug}/?search=${query}`);
    }

    return (
        <div>
            <Head>
                <title>Blog {formatSlug(slug)}</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <Tabs handleOnSearch={debounce(handleOnSearch, 500)} categories={categories.items}/>
            {/*Articles*/}
            <ArticleList articles={articles.items}/>
            <Pagination page={articles.pagination.page} pageCount={articles.pagination.pageCount} redirectUrl={`/category/${slug}`}/>
        </div>
    )
}

export const getServerSideProps: GetServerSideProps = async ({query}) => {

    // fetch categories based articles
    const options: Partial<IQueryOptions> = {
        populate: ['author.avatar', "image"],
        sort: ['id:desc'],
        filters: {
            category: {
                slug: query.category
            }
        },
        pagination: {
            page: query.page ? +query.page : 1,
            pageSize: 10,
        }
    }

    if(query.search){
        options.filters = {
            title: {
                $containsi: query.search
            }
        }
    }

    const queryString = qs.stringify(options);
    const {data: articles}: AxiosResponse<ICollectionResponse<IArticle[]>> = await getArticles(queryString);


    // fetch categories
    const {data: categories}: AxiosResponse<ICollectionResponse<ICategory[]>> = await getCategories();
    return {
        props: {
            categories: {
                items: categories.data,
            },
            articles: {
                items: articles.data,
                pagination: articles.meta.pagination
            },
            slug: query.category,
        }
    }
}

export default category;